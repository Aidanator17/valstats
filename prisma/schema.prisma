generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model matches {
  id              Int     @id @default(autoincrement())
  match_id        String? @unique(map: "match_id") @db.VarChar(100)
  match_info      String? @db.LongText
  match_type      String? @db.VarChar(45)
  match_map       String? @db.VarChar(45)
  match_starttime Int?
  act_id          String? @db.VarChar(100)
  adjusted        Int     @default(0) @db.TinyInt

  @@index([match_type], map: "idx_match_type")
  @@index([match_id], map: "idx_match_id")
}

model players {
  id              Int               @id @default(autoincrement())
  puuid           String            @unique(map: "puuid") @db.VarChar(100)
  players_matches players_matches[]
}

model players_matches {
  id        Int     @id @default(autoincrement())
  player_id Int
  matchid   String  @db.VarChar(200)
  players   players @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "players_matches_ibfk_1")

  @@unique([player_id, matchid], map: "unique_playermatches")
  @@index([player_id], map: "idx_player_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model matches_backup {
  id              Int     @default(0)
  match_id        String? @db.VarChar(100)
  match_info      String? @db.LongText
  match_type      String? @db.VarChar(45)
  match_map       String? @db.VarChar(45)
  match_starttime Int?

  @@ignore
}

model agents {
  agents_id Int    @id @unique(map: "agents_id_UNIQUE") @default(autoincrement())
  name      String @db.VarChar(45)
  data      String @db.MediumText
  act       String @db.VarChar(200)

  @@unique([name, act], map: "unique_agent_act")
}

model map_picks {
  map_picks_id Int    @id @default(autoincrement())
  map          String @db.VarChar(45)
  count        Int
  act          String @db.VarChar(200)

  @@unique([map, act], map: "unique_map_act")
}

model mass_agents {
  mass_agents_id Int    @id @default(autoincrement())
  data           String @db.MediumText
  act            String @unique(map: "act_UNIQUE") @db.VarChar(200)
}

model map_stats {
  map_stats_id Int     @id @default(autoincrement())
  map          String? @db.VarChar(45)
  data         String? @db.MediumText
  act          String? @db.VarChar(45)

  @@unique([map, act], map: "map_act")
}

model compact_epi_data {
  compact_epi_data_id Int    @id @unique(map: "compact_epi_data_id_UNIQUE") @default(autoincrement())
  data                String @db.MediumText
}

model leaderboards {
  id   Int    @id @unique(map: "id_UNIQUE") @default(autoincrement())
  act  String @unique(map: "act_UNIQUE") @db.VarChar(200)
  data String @db.MediumText
}

model per_map_stats {
  per_map_stats_id Int    @id @unique(map: "per_map_stats_id_UNIQUE") @default(autoincrement())
  map              String @db.VarChar(45)
  act              String @db.VarChar(45)
  data             String @db.MediumText
}

model blob_matches {
  id              Int     @id @default(autoincrement())
  match_id        String? @unique(map: "match_id") @db.VarChar(100)
  match_info      Bytes?  @db.MediumBlob
  match_type      String? @db.VarChar(45)
  match_map       String? @db.VarChar(45)
  match_starttime Int?
  act_id          String? @db.VarChar(100)
  adjusted        Int     @default(0) @db.TinyInt

  @@index([match_id], map: "idx_match_id")
  @@index([match_type], map: "idx_match_type")
}

model act_comp_totals {
  id        Int    @id @default(autoincrement())
  act_id    String @unique(map: "act_id_UNIQUE") @db.VarChar(200)
  act_count Int?
}
